An error occurred while executing the following cell:
------------------
# Example
dim = 2
# Set the hyperparameter for the NIW distribution
hyper_params = dict(loc=jnp.zeros(dim), mean_precision=0.05, df=dim + 5, scale=jnp.eye(dim))
# Generate the NIW object
dp_base_measure = NormalInverseWishart(**hyper_params)
key = random.PRNGKey(0)
num_of_samples = 1000
dp_concentrations = jnp.array([1.0, 2.0])
key, *subkeys = random.split(key, 3)
# Sampling from the DP mixture distribution
cluster_means, cluster_covs, samples = vmap(dp_mixgauss_sample, in_axes=(0, None, 0, None))(
    jnp.array(subkeys), num_of_samples, dp_concentrations, dp_base_measure
)
------------------

---------------------------------------------------------------------------
TracerArrayConversionError                Traceback (most recent call last)
/tmp/ipykernel_3817/838087406.py in <module>
     11 # Sampling from the DP mixture distribution
     12 cluster_means, cluster_covs, samples = vmap(dp_mixgauss_sample, in_axes=(0, None, 0, None))(
---> 13     jnp.array(subkeys), num_of_samples, dp_concentrations, dp_base_measure
     14 )

    [... skipping hidden 3 frame]

~/miniconda3/envs/py37/lib/python3.7/site-packages/probml_utils/dp_mixgauss_utils.py in dp_mixgauss_sample(key, num_of_samples, dp_concentration, dp_base_measure)
    154     # Generating distribution parameters for each observation from the base measure
    155     key, subkey = random.split(key)
--> 156     cluster_parameters = dp_base_measure.sample(seed=subkey, sample_shape=(num_of_clusters,))
    157     # Sampling
    158     subkeys = random.split(key, num_of_samples)

~/miniconda3/envs/py37/lib/python3.7/site-packages/tensorflow_probability/substrates/jax/distributions/distribution.py in sample(self, sample_shape, seed, name, **kwargs)
   1232     """
   1233     with self._name_and_control_scope(name):
-> 1234       return self._call_sample_n(sample_shape, seed, **kwargs)
   1235 
   1236   def _call_sample_and_log_prob(self, sample_shape, seed, **kwargs):

~/miniconda3/envs/py37/lib/python3.7/site-packages/tensorflow_probability/substrates/jax/distributions/joint_distribution.py in _call_sample_n(self, sample_shape, seed, value, **kwargs)
    962         value=self._resolve_value(value=value,
    963                                   allow_partially_specified=True,
--> 964                                   **kwargs))
    965 
    966   def _execute_model(self,

~/miniconda3/envs/py37/lib/python3.7/site-packages/tensorflow_probability/substrates/jax/internal/distribution_util.py in _fn(*args, **kwargs)
   1360     @functools.wraps(fn)
   1361     def _fn(*args, **kwargs):
-> 1362       return fn(*args, **kwargs)
   1363 
   1364     if _fn.__doc__ is None:

~/miniconda3/envs/py37/lib/python3.7/site-packages/tensorflow_probability/substrates/jax/distributions/joint_distribution.py in _sample_n(self, sample_shape, seed, value)
    697 
    698     might_have_batch_dims = (
--> 699         distribution_util.shape_may_be_nontrivial(sample_shape)
    700         or value is not None)
    701     if might_have_batch_dims:

~/miniconda3/envs/py37/lib/python3.7/site-packages/tensorflow_probability/substrates/jax/internal/distribution_util.py in shape_may_be_nontrivial(shape)
    188 def shape_may_be_nontrivial(shape):
    189   """Returns `True` if it's possible that `shape` describes a non-scalar."""
--> 190   static_size = tf.get_static_value(ps.size(shape))
    191   return (static_size is None) or static_size >= 1
    192 

~/miniconda3/envs/py37/lib/python3.7/site-packages/decorator.py in fun(*args, **kw)
    230             if not kwsyntax:
    231                 args, kw = fix(args, kw, sig)
--> 232             return caller(func, *(extras + args), **kw)
    233     fun.__name__ = func.__name__
    234     fun.__doc__ = func.__doc__

~/miniconda3/envs/py37/lib/python3.7/site-packages/tensorflow_probability/substrates/jax/internal/prefer_static.py in wrap(***failed resolving arguments***)
     95   def wrap(wrapped_fn, *args, **kwargs):
     96     del wrapped_fn
---> 97     return new_fn(*args, **kwargs)
     98   return wrap(original_fn)
     99 

~/miniconda3/envs/py37/lib/python3.7/site-packages/tensorflow_probability/substrates/jax/internal/prefer_static.py in _size(input, out_type, name)
    413 def _size(input, out_type=tf.int32, name=None):  # pylint: disable=redefined-builtin
    414   if not hasattr(input, 'shape'):
--> 415     x = np.array(input)
    416     input = tf.convert_to_tensor(input) if x.dtype is np.object_ else x
    417   n = tensorshape_util.num_elements(tf.TensorShape(input.shape))

~/miniconda3/envs/py37/lib/python3.7/site-packages/jax/core.py in __array__(self, *args, **kw)
    535 
    536   def __array__(self, *args, **kw):
--> 537     raise TracerArrayConversionError(self)
    538 
    539   def __index__(self):

TracerArrayConversionError: The numpy.ndarray conversion method __array__() was called on the JAX Tracer object Traced<ShapedArray(int32[], weak_type=True)>with<BatchTrace(level=1/0)> with
  val = DeviceArray([ 7, 10], dtype=int32, weak_type=True)
  batch_dim = 0
This Tracer was created on line /github/home/miniconda3/envs/py37/lib/python3.7/site-packages/probml_utils/dp_mixgauss_utils.py:152 (dp_mixgauss_sample)
See https://jax.readthedocs.io/en/latest/errors.html#jax.errors.TracerArrayConversionError
TracerArrayConversionError: The numpy.ndarray conversion method __array__() was called on the JAX Tracer object Traced<ShapedArray(int32[], weak_type=True)>with<BatchTrace(level=1/0)> with
  val = DeviceArray([ 7, 10], dtype=int32, weak_type=True)
  batch_dim = 0
This Tracer was created on line /github/home/miniconda3/envs/py37/lib/python3.7/site-packages/probml_utils/dp_mixgauss_utils.py:152 (dp_mixgauss_sample)
See https://jax.readthedocs.io/en/latest/errors.html#jax.errors.TracerArrayConversionError
